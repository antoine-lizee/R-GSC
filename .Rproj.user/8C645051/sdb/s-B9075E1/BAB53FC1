{
    "contents" : "# Implementation of the Gerstein-Sonnhammer-Chothia algorithm\n#\n# This script makes discoverable the funtion \"GSC\" that takes as argument a dendrogram and returns\n# a named vector of weight for each of the leaves of the input dendrogram. These weigths are supposed\n# to account for similarity between objects when considering them in a model. The more similar, the \n# lower the weights.\n# The initial description of the implementation can be found here: https://pdf.yt/d/Sx3jMbr8vANgxAej/download\n# As per request for: http://thinklab.org/p/rephetio/seeking-an-open-source-implementation-of-the-gerstein-sonnhammer-chothia-algorithm/25\n\n\n# Algorithm ---------------------------------------------------------------------\n\n# getGSCs is a handler for the main recursve funtion below. It actually does all the work:\n# It applies the main function to the child tree and does the main weighing computation,\n# or create the right data structure (and check consistency) for a leaf.\ngetGSCs <- function(ddchild, parentHeight) {\n  ddcAttrs <- attributes(ddchild)\n  if (ddcAttrs$members == 1) { # we have a leaf.\n    stopifnot(ddcAttrs$height == 0, ddcAttrs$leaf) # leaf should be at height 0, and have the leaf signature\n    # Create the coeffs\n    GSCs <- parentHeight\n    names(GSCs) <- ddcAttrs$label\n  } else { # we have a tree\n    gscs <- GSCrec(ddchild)\n    GSCs <- gscs + gscs * (parentHeight-ddcAttrs$height) / sum(gscs)\n  }\n  GSCs\n}\n\n# Main recursive function\nGSCrec <- function(dd) {\n  h0 <- attr(dd, \"height\")\n  return(c(getGSCs(dd[[1]], h0), getGSCs(dd[[2]], h0)))\n}\n\n# Main function to do some checks + normalize the weights at the end.\nGSC <- function(dd) {\n  if(class(dd) != \"dendrogram\") {\n    stop(\"Argument should be a dendrogram object. Please use as.dendrogram()\")\n  }\n  GSCs <- GSCrec(dd)\n  return(GSCs / sum(GSCs) * length(GSCs))\n}\n\n\n\n# Tests -------------------------------------------------------------------\n\nif (test <- TRUE) { # Change to TRUE to launch testing code\n  \n  # This is the actual example of the paper. The reader should be warned that the results in the paper are\n  # wrong, due to some imprecision.\n  testhc <- list(\"merge\" = matrix(nrow = 3, byrow = T, c(-1,-2,-3,1, -4,2)),\n                 \"height\" = c(20, 50, 80),\n                 \"order\" = c(1,2,3,4),\n                 \"labels\" = LETTERS[1:4])\n  attr(testhc, \"class\") <- \"hclust\"\n  testdend <- as.dendrogram(testhc)\n  plot(testdend)\n  print(GSC(testdend))\n  \n  # A more real-looking use-case:\n  hc <- hclust(dist(mtcars))\n  dd <- as.dendrogram(hc)\n  plot(as.dendrogram(hc))\n  ddGSCs <- GSC(dd) #compute the weights\n  hc$labels[hc$order] <- paste(names(ddGSCs), sprintf(\"%.1f\", ddGSCs), sep = \" - \") #add them to the label names\n  plot(as.dendrogram(hc)) #plot them to have a look.\n   \n}\n",
    "created" : 1421979334357.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2250920010",
    "id" : "BAB53FC1",
    "lastKnownWriteTime" : 1421985501,
    "path" : "/Volumes/FD/MISSIONS/ThinkLab/hetio/R/GSC.R",
    "project_path" : "GSC.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}